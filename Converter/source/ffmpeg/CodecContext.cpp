#include "CodecContext.h"

///////////////////////////////////////////////////////////////////////////////////////////////

CCodecContext::CCodecContext()
{
	Initialize();
}

///////////////////////////////////////////////////////////////////////////////////////////////

CCodecContext::~CCodecContext()
{
	FreeContext();
}

///////////////////////////////////////////////////////////////////////////////////////////////

void CCodecContext::Initialize()
{
	Codec     = NULL;
	CodecCtx  = NULL;

	Allocated = false;
}

///////////////////////////////////////////////////////////////////////////////////////////////

AVCodecContext* CCodecContext::GetCtx()
{
	return CodecCtx;
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool CCodecContext::GetContextFromStream(AVStream* stream)
{
	CodecCtx = NULL;
	if(stream)
		CodecCtx = stream->codec;
	
	return CodecCtx != NULL;
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool CCodecContext::AllocContext()
{
	if(!Allocated){
		CodecCtx = avcodec_alloc_context3(Codec);
		Allocated = CodecCtx != NULL;
	}

	return Allocated;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void CCodecContext::FreeContext()
{
	CloseCodec();

	if(CodecCtx != NULL && Allocated)
		av_free(&CodecCtx);

	Initialize();
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

bool CCodecContext::OpenCodec()
{
	int res = avcodec_open2(CodecCtx, Codec, NULL);
	return res >= 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void CCodecContext::CloseCodec()
{
	if(CodecCtx)
		avcodec_close(CodecCtx);
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

bool CCodecContext::FindDecoder()
{
	Codec = NULL;
	if(CodecCtx)
		Codec = avcodec_find_decoder(CodecCtx->codec_id);

	return Codec != NULL;
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool CCodecContext::FindEncoder(AVCodecID id)
{
	Codec = avcodec_find_encoder(id);
	return Codec != NULL;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

int CCodecContext::GetFrameWidth()
{
	if(!CodecCtx)
		return 0;

	return CodecCtx->width;
}

int CCodecContext::GetFrameHeight()
{
	if(!CodecCtx)
		return 0;

	return CodecCtx->height;
}

AVPixelFormat CCodecContext::GetPixelFormat()
{
	if(!CodecCtx)
		return AV_PIX_FMT_NONE;

	return CodecCtx->pix_fmt;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

void CCodecContext::SetSize(int w, int h)
{
	if(CodecCtx){
		CodecCtx->width  = w;
		CodecCtx->height = h;
	}
}

void CCodecContext::SetFormat(AVPixelFormat fmt)
{
	if(CodecCtx)
		CodecCtx->pix_fmt = fmt;
}

void CCodecContext::SetBitrate(int bitrate)
{
	if(CodecCtx)
		CodecCtx->bit_rate = bitrate;
}

void CCodecContext::SetFramerate(int num, int den)
{
	if(CodecCtx){

		AVRational framerate;
		framerate.num = num;
		framerate.den = den;

		CodecCtx->time_base = framerate;
	}
}

void CCodecContext::SetGopSize(int gop_size)
{
	if(CodecCtx)
		CodecCtx->gop_size = gop_size;
}

void CCodecContext::SetMaxBFrames(int max_b_frames)
{
	if(CodecCtx)
		CodecCtx->max_b_frames = max_b_frames;
}

void CCodecContext::SetAudioSettings(int num_channels, int bitrate, int sample_rate)
{
	if(CodecCtx){
		CodecCtx->channels    = num_channels;
		CodecCtx->bit_rate    = bitrate;
		CodecCtx->sample_rate = sample_rate;
	}
}
