#include "CodecContext.h"

///////////////////////////////////////////////////////////////////////////////////////////////

CCodecContext::CCodecContext()
{
	Initialize();
}

///////////////////////////////////////////////////////////////////////////////////////////////

CCodecContext::~CCodecContext()
{
	FreeContext();
}

///////////////////////////////////////////////////////////////////////////////////////////////

void CCodecContext::Initialize()
{
	Codec     = NULL;
	CodecCtx  = NULL;

	Allocated = false;
}

///////////////////////////////////////////////////////////////////////////////////////////////

AVCodecContext* CCodecContext::GetCtx()
{
	return CodecCtx;
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool CCodecContext::GetContextFromStream(AVStream* stream)
{
	CodecCtx = NULL;
	if(stream)
		CodecCtx = stream->codec;
	
	return CodecCtx != NULL;
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool CCodecContext::AllocContext()
{
	if(!Allocated){
		CodecCtx = avcodec_alloc_context3(Codec);
		Allocated = CodecCtx != NULL;
	}

	return Allocated;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void CCodecContext::FreeContext()
{
	CloseCodec();

	if(CodecCtx != NULL && Allocated)
		av_free(&CodecCtx);

	Initialize();
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

bool CCodecContext::OpenCodec()
{
	int res = avcodec_open2(CodecCtx, Codec, NULL);
	return res >= 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void CCodecContext::CloseCodec()
{
	if(CodecCtx)
		avcodec_close(CodecCtx);
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

bool CCodecContext::FindDecoder()
{
	Codec = NULL;
	if(CodecCtx)
		Codec = avcodec_find_decoder(CodecCtx->codec_id);

	return Codec != NULL;
}

///////////////////////////////////////////////////////////////////////////////////////////////

bool CCodecContext::FindEncoder(AVCodecID id)
{
	Codec = avcodec_find_encoder(id);
	return Codec != NULL;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

int CCodecContext::GetFrameWidth()
{
	if(!CodecCtx)
		return 0;

	return CodecCtx->width;
}

int CCodecContext::GetFrameHeight()
{
	if(!CodecCtx)
		return 0;

	return CodecCtx->height;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

void CCodecContext::SetupDecoder()
{
	/*
	int src_width  = VideoDecoder->codec_ctx->width;
	int src_height = VideoDecoder->codec_ctx->height;

	int dst_width  = src_width;
	int dst_height = src_height;

	SetSizeLimit(dst_width, dst_height, 1024);
	SetAlignment(dst_width, dst_height, 16);

	AVPixelFormat dst_format = AV_PIX_FMT_YUV420P;
	AVPixelFormat src_format = VideoDecoder->codec_ctx->pix_fmt;
	
	*/
}

///////////////////////////////////////////////////////////////////////////////////////////////

void CCodecContext::SetupEncoder()
{
	/*
	CodecCtx->width  = width;
	CodecCtx->height = height;

	CodecCtx->bit_rate  = bitrate;
	CodecCtx->time_base = framerate;

	CodecCtx->pix_fmt      = pix_fmt;
	CodecCtx->gop_size     = gop_size;
	CodecCtx->max_b_frames = max_b_frames;
	*/
}